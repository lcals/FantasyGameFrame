<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Toolkit.Diagnostics</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
            <remarks>Internal copy from the BCL attribute.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that a given <see cref="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue"/> also indicates
            whether the method will not return (eg. throw an exception).
            </summary>
            <remarks>Internal copy from the BCL attribute.</remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute"/> class.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets a value indicating whether the parameter value should be <see langword="true"/>.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be <see langword="null"/> even if the corresponding type allows it.
            Specifies that an input argument was not <see langword="null"/> when the call returns.
            </summary>
            <remarks>Internal copy from the BCL attribute.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
            <remarks>Internal copy from the BCL attribute.</remarks>
        </member>
        <member name="T:Microsoft.Toolkit.Diagnostics.TypeExtensions">
            <summary>
            Helpers for working with types.
            </summary>
        </member>
        <member name="F:Microsoft.Toolkit.Diagnostics.TypeExtensions.BuiltInTypesMap">
            <summary>
            The mapping of built-in types to their simple representation.
            </summary>
        </member>
        <member name="F:Microsoft.Toolkit.Diagnostics.TypeExtensions.DisplayNames">
            <summary>
            A thread-safe mapping of precomputed string representation of types.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.TypeExtensions.ToTypeString(System.Type)">
            <summary>
            Returns a simple string representation of a type.
            </summary>
            <param name="type">The input type.</param>
            <returns>The string representation of <paramref name="type"/>.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.TypeExtensions.IsGenericType(System.Type)">
            <summary>
            Returns whether or not a given type is generic.
            </summary>
            <param name="type">The input type.</param>
            <returns>Whether or not the input type is generic.</returns>
        </member>
        <member name="T:Microsoft.Toolkit.Diagnostics.ValueTypeExtensions">
            <summary>
            Helpers for working with value types.
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Diagnostics.ValueTypeExtensions.HexCharactersTable">
            <summary>
            Gets the table of hex characters (doesn't allocate, maps to .text section, see <see href="https://github.com/dotnet/roslyn/pull/24621"/>).
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ValueTypeExtensions.ToHexString``1(``0)">
            <summary>
            Returns a hexadecimal <see cref="T:System.String"/> representation of a given <typeparamref name="T"/> value, left-padded and ordered as big-endian.
            </summary>
            <typeparam name="T">The input type to format to <see cref="T:System.String"/>.</typeparam>
            <param name="value">The input value to format to <see cref="T:System.String"/>.</param>
            <returns>
            The hexadecimal representation of <paramref name="value"/> (with the '0x' prefix), left-padded to byte boundaries and ordered as big-endian.
            </returns>
            <remarks>
            As a byte (8 bits) is represented by two hexadecimal digits (each representing a group of 4 bytes), each <see cref="T:System.String"/>
            representation will always contain an even number of digits. For instance:
            <code>
            Console.WriteLine(1.ToHexString()); // "0x01"
            Console.WriteLine(((byte)255).ToHexString()); // "0xFF"
            Console.WriteLine((-1).ToHexString()); // "0xFFFFFFFF"
            </code>
            </remarks>
        </member>
        <member name="T:Microsoft.Toolkit.Diagnostics.Guard">
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
            <summary>
            Helper methods to verify conditions when running code.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.Span{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Span`1"/> instance must be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1"/> instance.</typeparam>
            <param name="span">The input <see cref="T:System.Span`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span"/> is != 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.Span{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Span`1"/> instance must not be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1"/> instance.</typeparam>
            <param name="span">The input <see cref="T:System.Span`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span"/> is == 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Span`1"/> instance must have a size of a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1"/> instance.</typeparam>
            <param name="span">The input <see cref="T:System.Span`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span"/> is != <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Span`1"/> instance must have a size not equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1"/> instance.</typeparam>
            <param name="span">The input <see cref="T:System.Span`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span"/> is == <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Span`1"/> instance must have a size over a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1"/> instance.</typeparam>
            <param name="span">The input <see cref="T:System.Span`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span"/> is &lt;= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Span`1"/> instance must have a size of at least or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1"/> instance.</typeparam>
            <param name="span">The input <see cref="T:System.Span`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span"/> is &lt; <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Span`1"/> instance must have a size of less than a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1"/> instance.</typeparam>
            <param name="span">The input <see cref="T:System.Span`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span"/> is >= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Span`1"/> instance must have a size of less than or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1"/> instance.</typeparam>
            <param name="span">The input <see cref="T:System.Span`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span"/> is > <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Span{``0},System.Span{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Span`1"/> instance must have the same size of a destination <see cref="T:System.Span`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1"/> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Span`1"/> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is != the one of <paramref name="destination"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Span{``0},System.Span{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Span`1"/> instance must have a size of less than or equal to that of a destination <see cref="T:System.Span`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1"/> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Span`1"/> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is > the one of <paramref name="destination"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.Span{``0},System.String)">
            <summary>
            Asserts that the input index is valid for a given <see cref="T:System.Span`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1"/> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="span"/>.</param>
            <param name="span">The input <see cref="T:System.Span`1"/> instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is not valid to access <paramref name="span"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.Span{``0},System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.Span`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1"/> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="span"/>.</param>
            <param name="span">The input <see cref="T:System.Span`1"/> instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is valid to access <paramref name="span"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.ReadOnlySpan{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1"/> instance must be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1"/> instance.</typeparam>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span"/> is != 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.ReadOnlySpan{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1"/> instance must not be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1"/> instance.</typeparam>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span"/> is == 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1"/> instance must have a size of a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1"/> instance.</typeparam>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span"/> is != <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1"/> instance must have a size not equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1"/> instance.</typeparam>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span"/> is == <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1"/> instance must have a size over a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1"/> instance.</typeparam>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span"/> is &lt;= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1"/> instance must have a size of at least or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1"/> instance.</typeparam>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span"/> is &lt; <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1"/> instance must have a size of less than a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1"/> instance.</typeparam>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span"/> is >= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlySpan`1"/> instance must have a size of less than or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1"/> instance.</typeparam>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="span"/> is > <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.ReadOnlySpan{``0},System.Span{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.ReadOnlySpan`1"/> instance must have the same size of a destination <see cref="T:System.ReadOnlySpan`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1"/> instance.</typeparam>
            <param name="source">The source <see cref="T:System.ReadOnlySpan`1"/> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.ReadOnlySpan`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is != the one of <paramref name="destination"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Span{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.ReadOnlySpan`1"/> instance must have a size of less than or equal to that of a destination <see cref="T:System.ReadOnlySpan`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1"/> instance.</typeparam>
            <param name="source">The source <see cref="T:System.ReadOnlySpan`1"/> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.ReadOnlySpan`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is > the one of <paramref name="destination"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.ReadOnlySpan{``0},System.String)">
            <summary>
            Asserts that the input index is valid for a given <see cref="T:System.ReadOnlySpan`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1"/> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="span"/>.</param>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1"/> instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is not valid to access <paramref name="span"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.ReadOnlySpan{``0},System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.ReadOnlySpan`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1"/> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="span"/>.</param>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1"/> instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is valid to access <paramref name="span"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.Memory{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Memory`1"/> instance must be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1"/> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.Memory`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory"/> is != 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.Memory{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Memory`1"/> instance must not be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1"/> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.Memory`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory"/> is == 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Memory`1"/> instance must have a size of a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1"/> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.Memory`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory"/> is != <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Memory`1"/> instance must have a size not equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1"/> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.Memory`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory"/> is == <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Memory`1"/> instance must have a size over a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1"/> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.Memory`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory"/> is &lt;= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Memory`1"/> instance must have a size of at least or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1"/> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.Memory`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory"/> is &lt; <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Memory`1"/> instance must have a size of less than a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1"/> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.Memory`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory"/> is >= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Memory`1"/> instance must have a size of less than or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1"/> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.Memory`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory"/> is > <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Memory{``0},System.Memory{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Memory`1"/> instance must have the same size of a destination <see cref="T:System.Memory`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1"/> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Memory`1"/> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Memory`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is != the one of <paramref name="destination"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Memory{``0},System.Memory{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Memory`1"/> instance must have a size of less than or equal to that of a destination <see cref="T:System.Memory`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1"/> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Memory`1"/> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Memory`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is > the one of <paramref name="destination"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.Memory{``0},System.String)">
            <summary>
            Asserts that the input index is valid for a given <see cref="T:System.Memory`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1"/> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="memory"/>.</param>
            <param name="memory">The input <see cref="T:System.Memory`1"/> instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is not valid to access <paramref name="memory"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.Memory{``0},System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.Memory`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Memory`1"/> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="memory"/>.</param>
            <param name="memory">The input <see cref="T:System.Memory`1"/> instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is valid to access <paramref name="memory"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.ReadOnlyMemory{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1"/> instance must be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1"/> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory"/> is != 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.ReadOnlyMemory{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1"/> instance must not be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1"/> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory"/> is == 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1"/> instance must have a size of a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1"/> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory"/> is != <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1"/> instance must have a size not equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1"/> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory"/> is == <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1"/> instance must have a size over a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1"/> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory"/> is &lt;= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1"/> instance must have a size of at least or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1"/> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory"/> is &lt; <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1"/> instance must have a size of less than a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1"/> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory"/> is >= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.ReadOnlyMemory`1"/> instance must have a size of less than or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1"/> instance.</typeparam>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="memory"/> is > <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.ReadOnlyMemory{``0},System.Memory{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.ReadOnlyMemory`1"/> instance must have the same size of a destination <see cref="T:System.ReadOnlyMemory`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1"/> instance.</typeparam>
            <param name="source">The source <see cref="T:System.ReadOnlyMemory`1"/> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.ReadOnlyMemory`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is != the one of <paramref name="destination"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.ReadOnlyMemory{``0},System.Memory{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.ReadOnlyMemory`1"/> instance must have a size of less than or equal to that of a destination <see cref="T:System.ReadOnlyMemory`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1"/> instance.</typeparam>
            <param name="source">The source <see cref="T:System.ReadOnlyMemory`1"/> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.ReadOnlyMemory`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is > the one of <paramref name="destination"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.ReadOnlyMemory{``0},System.String)">
            <summary>
            Asserts that the input index is valid for a given <see cref="T:System.ReadOnlyMemory`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1"/> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="memory"/>.</param>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1"/> instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is not valid to access <paramref name="memory"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.ReadOnlyMemory{``0},System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.ReadOnlyMemory`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlyMemory`1"/> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="memory"/>.</param>
            <param name="memory">The input <see cref="T:System.ReadOnlyMemory`1"/> instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is valid to access <paramref name="memory"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)">
            <summary>
            Asserts that the input <see typeparamref="T"/> array instance must be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T"/> array instance.</typeparam>
            <param name="array">The input <see typeparamref="T"/> array instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array"/> is != 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(``0[],System.String)">
            <summary>
            Asserts that the input <see typeparamref="T"/> array instance must not be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T"/> array instance.</typeparam>
            <param name="array">The input <see typeparamref="T"/> array instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array"/> is == 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)">
            <summary>
            Asserts that the input <see typeparamref="T"/> array instance must have a size of a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T"/> array instance.</typeparam>
            <param name="array">The input <see typeparamref="T"/> array instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array"/> is != <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)">
            <summary>
            Asserts that the input <see typeparamref="T"/> array instance must have a size not equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T"/> array instance.</typeparam>
            <param name="array">The input <see typeparamref="T"/> array instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array"/> is == <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)">
            <summary>
            Asserts that the input <see typeparamref="T"/> array instance must have a size over a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T"/> array instance.</typeparam>
            <param name="array">The input <see typeparamref="T"/> array instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array"/> is &lt;= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)">
            <summary>
            Asserts that the input <see typeparamref="T"/> array instance must have a size of at least or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T"/> array instance.</typeparam>
            <param name="array">The input <see typeparamref="T"/> array instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array"/> is &lt; <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)">
            <summary>
            Asserts that the input <see typeparamref="T"/> array instance must have a size of less than a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T"/> array instance.</typeparam>
            <param name="array">The input <see typeparamref="T"/> array instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array"/> is >= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)">
            <summary>
            Asserts that the input <see typeparamref="T"/> array instance must have a size of less than or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T"/> array instance.</typeparam>
            <param name="array">The input <see typeparamref="T"/> array instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="array"/> is > <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)">
            <summary>
            Asserts that the source <see typeparamref="T"/> array instance must have the same size of a destination <see typeparamref="T"/> array instance.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T"/> array instance.</typeparam>
            <param name="source">The source <see typeparamref="T"/> array instance to check the size for.</param>
            <param name="destination">The destination <see typeparamref="T"/> array instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is != the one of <paramref name="destination"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)">
            <summary>
            Asserts that the source <see typeparamref="T"/> array instance must have a size of less than or equal to that of a destination <see typeparamref="T"/> array instance.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T"/> array instance.</typeparam>
            <param name="source">The source <see typeparamref="T"/> array instance to check the size for.</param>
            <param name="destination">The destination <see typeparamref="T"/> array instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is > the one of <paramref name="destination"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)">
            <summary>
            Asserts that the input index is valid for a given <see typeparamref="T"/> array instance.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T"/> array instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="array"/>.</param>
            <param name="array">The input <see typeparamref="T"/> array instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is not valid to access <paramref name="array"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see typeparamref="T"/> array instance.
            </summary>
            <typeparam name="T">The item of items in the input <see typeparamref="T"/> array instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="array"/>.</param>
            <param name="array">The input <see typeparamref="T"/> array instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is valid to access <paramref name="array"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1"/> instance must be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1"/> instance.</typeparam>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list"/> is != 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1"/> instance must not be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1"/> instance.</typeparam>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list"/> is == 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1"/> instance must have a size of a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1"/> instance.</typeparam>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list"/> is != <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1"/> instance must have a size not equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1"/> instance.</typeparam>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list"/> is == <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1"/> instance must have a size over a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1"/> instance.</typeparam>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list"/> is &lt;= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1"/> instance must have a size of at least or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1"/> instance.</typeparam>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list"/> is &lt; <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1"/> instance must have a size of less than a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1"/> instance.</typeparam>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list"/> is >= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.List`1"/> instance must have a size of less than or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1"/> instance.</typeparam>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="list"/> is > <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.List`1"/> instance must have the same size of a destination <see cref="T:System.Collections.Generic.List`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1"/> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.List`1"/> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Collections.Generic.List`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is != the one of <paramref name="destination"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.List`1"/> instance must have a size of less than or equal to that of a destination <see cref="T:System.Collections.Generic.List`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1"/> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.List`1"/> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Collections.Generic.List`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is > the one of <paramref name="destination"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.Collections.Generic.List{``0},System.String)">
            <summary>
            Asserts that the input index is valid for a given <see cref="T:System.Collections.Generic.List`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1"/> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="list"/>.</param>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1"/> instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is not valid to access <paramref name="list"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.Collections.Generic.List{``0},System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.Collections.Generic.List`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.List`1"/> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="list"/>.</param>
            <param name="list">The input <see cref="T:System.Collections.Generic.List`1"/> instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is valid to access <paramref name="list"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance must be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection"/> is != 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance must not be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection"/> is == 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance must have a size of a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection"/> is != <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance must have a size not equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection"/> is == <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance must have a size over a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection"/> is &lt;= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance must have a size of at least or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection"/> is &lt; <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance must have a size of less than a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection"/> is >= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance must have a size of less than or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection"/> is > <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.ICollection`1"/> instance must have the same size of a destination <see cref="T:System.Collections.Generic.ICollection`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.ICollection`1"/> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Collections.Generic.ICollection`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is != the one of <paramref name="destination"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.ICollection`1"/> instance must have a size of less than or equal to that of a destination <see cref="T:System.Collections.Generic.ICollection`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.ICollection`1"/> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Collections.Generic.ICollection`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is > the one of <paramref name="destination"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that the input index is valid for a given <see cref="T:System.Collections.Generic.ICollection`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="collection"/>.</param>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1"/> instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is not valid to access <paramref name="collection"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.Collections.Generic.ICollection`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.ICollection`1"/> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="collection"/>.</param>
            <param name="collection">The input <see cref="T:System.Collections.Generic.ICollection`1"/> instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is valid to access <paramref name="collection"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance must be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection"/> is != 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance must not be empty.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection"/> is == 0.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance must have a size of a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection"/> is != <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance must have a size not equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection"/> is == <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance must have a size over a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection"/> is &lt;= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance must have a size of at least or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection"/> is &lt; <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance must have a size of less than a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection"/> is >= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance must have a size of less than or equal to a specified value.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance.</typeparam>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="collection"/> is > <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance must have the same size of a destination <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is != the one of <paramref name="destination"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that the source <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance must have a size of less than or equal to that of a destination <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is > the one of <paramref name="destination"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,System.Collections.Generic.IReadOnlyCollection{``0},System.String)">
            <summary>
            Asserts that the input index is valid for a given <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="collection"/>.</param>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is not valid to access <paramref name="collection"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,System.Collections.Generic.IReadOnlyCollection{``0},System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance.</typeparam>
            <param name="index">The input index to be used to access <paramref name="collection"/>.</param>
            <param name="collection">The input <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is valid to access <paramref name="collection"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Byte"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Byte"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is != <paramref name="target"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Byte"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Byte"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is == <paramref name="target"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Byte"/> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Byte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Byte"/> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Byte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Byte"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Byte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Byte"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Byte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Byte"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Byte"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Byte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Byte"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Byte"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Byte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Byte"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Byte"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Byte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Byte"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Byte"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Byte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Byte"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Byte"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Byte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or > <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Byte"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Byte"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Byte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt;= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.SByte"/> value to test.</param>
            <param name="target">The target <see cref="T:System.SByte"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is != <paramref name="target"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.SByte"/> value to test.</param>
            <param name="target">The target <see cref="T:System.SByte"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is == <paramref name="target"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.SByte"/> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.SByte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.SByte"/> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.SByte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.SByte"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.SByte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.SByte"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.SByte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.SByte"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.SByte"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.SByte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.SByte"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.SByte"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.SByte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.SByte"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.SByte"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.SByte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.SByte"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.SByte"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.SByte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.SByte"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.SByte"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.SByte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or > <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.SByte"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.SByte"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.SByte"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt;= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int16"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Int16"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is != <paramref name="target"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int16"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Int16"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is == <paramref name="target"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int16"/> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int16"/> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int16"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int16"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Int16"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int16"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Int16"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int16"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int16"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int16"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int16"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int16"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int16"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int16"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or > <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int16"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int16"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt;= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16"/> value to test.</param>
            <param name="target">The target <see cref="T:System.UInt16"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is != <paramref name="target"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16"/> value to test.</param>
            <param name="target">The target <see cref="T:System.UInt16"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is == <paramref name="target"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16"/> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16"/> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt16"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt16"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt16"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt16"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt16"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or > <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt16"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt16"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt16"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt;= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Char"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Char"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is != <paramref name="target"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Char"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Char"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is == <paramref name="target"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Char"/> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Char"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Char"/> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Char"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Char"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Char"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Char"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Char"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Char"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Char"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Char"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Char"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Char"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Char"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Char"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Char"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Char"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Char"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Char"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Char"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Char"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Char"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Char"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or > <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Char"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Char"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Char"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt;= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int32"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Int32"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is != <paramref name="target"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int32"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Int32"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is == <paramref name="target"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int32"/> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int32"/> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int32"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int32"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Int32"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int32"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Int32"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int32"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int32"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int32"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int32"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int32"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int32"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int32"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or > <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int32"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int32"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt;= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value to test.</param>
            <param name="target">The target <see cref="T:System.UInt32"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is != <paramref name="target"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value to test.</param>
            <param name="target">The target <see cref="T:System.UInt32"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is == <paramref name="target"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt32"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt32"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt32"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt32"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt32"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or > <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt32"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt32"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt;= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Single"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Single"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is != <paramref name="target"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Single"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Single"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is == <paramref name="target"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Single"/> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Single"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Single"/> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Single"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Single"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Single"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Single"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Single"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Single"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Single"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Single"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Single"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Single"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Single"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Single"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Single"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Single"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Single"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Single"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Single"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Single"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Single"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Single"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or > <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Single"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Single"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Single"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt;= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int64"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Int64"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is != <paramref name="target"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int64"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Int64"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is == <paramref name="target"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int64"/> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int64"/> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int64"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int64"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Int64"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int64"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Int64"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int64"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int64"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int64"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int64"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Int64"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Int64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int64"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int64"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or > <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Int64"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Int64"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Int64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt;= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value to test.</param>
            <param name="target">The target <see cref="T:System.UInt64"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is != <paramref name="target"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value to test.</param>
            <param name="target">The target <see cref="T:System.UInt64"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is == <paramref name="target"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt64"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt64"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt64"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.UInt64"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.UInt64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt64"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or > <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.UInt64"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.UInt64"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt;= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Double"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Double"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is != <paramref name="target"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Double"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Double"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is == <paramref name="target"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Double"/> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Double"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Double"/> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Double"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Double"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Double"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Double"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Double"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Double"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Double"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Double"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Double"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Double"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Double"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Double"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Double"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Double"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Double"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Double"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Double"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Double"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Double"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Double"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or > <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Double"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Double"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Double"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt;= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Decimal"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is != <paramref name="target"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Decimal"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is == <paramref name="target"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal"/> value to test.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Decimal"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal"/> value to test.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Decimal"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Decimal"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Decimal"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Decimal"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Decimal"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Decimal"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Decimal"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Decimal"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Decimal"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see cref="T:System.Decimal"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see cref="T:System.Decimal"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Decimal"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Decimal"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or > <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see cref="T:System.Decimal"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see cref="T:System.Decimal"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see cref="T:System.Decimal"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt;= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see langword="nint"/> value to test.</param>
            <param name="target">The target <see langword="nint"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is != <paramref name="target"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see langword="nint"/> value to test.</param>
            <param name="target">The target <see langword="nint"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is == <paramref name="target"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see langword="nint"/> value to test.</param>
            <param name="maximum">The exclusive maximum <see langword="nint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see langword="nint"/> value to test.</param>
            <param name="maximum">The inclusive maximum <see langword="nint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see langword="nint"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see langword="nint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see langword="nint"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see langword="nint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see langword="nint"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see langword="nint"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see langword="nint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see langword="nint"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see langword="nint"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see langword="nint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see langword="nint"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see langword="nint"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see langword="nint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see langword="nint"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see langword="nint"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see langword="nint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see langword="nint"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see langword="nint"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see langword="nint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or > <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see langword="nint"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see langword="nint"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see langword="nint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt;= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo(System.UIntPtr,System.UIntPtr,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <param name="value">The input <see langword="nuint"/> value to test.</param>
            <param name="target">The target <see langword="nuint"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is != <paramref name="target"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo(System.UIntPtr,System.UIntPtr,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <param name="value">The input <see langword="nuint"/> value to test.</param>
            <param name="target">The target <see langword="nuint"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is == <paramref name="target"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan(System.UIntPtr,System.UIntPtr,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <param name="value">The input <see langword="nuint"/> value to test.</param>
            <param name="maximum">The exclusive maximum <see langword="nuint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo(System.UIntPtr,System.UIntPtr,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <param name="value">The input <see langword="nuint"/> value to test.</param>
            <param name="maximum">The inclusive maximum <see langword="nuint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan(System.UIntPtr,System.UIntPtr,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <param name="value">The input <see langword="nuint"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see langword="nuint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo(System.UIntPtr,System.UIntPtr,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <param name="value">The input <see langword="nuint"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see langword="nuint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange(System.UIntPtr,System.UIntPtr,System.UIntPtr,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <param name="value">The input <see langword="nuint"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see langword="nuint"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see langword="nuint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange(System.UIntPtr,System.UIntPtr,System.UIntPtr,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <param name="value">The input <see langword="nuint"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see langword="nuint"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see langword="nuint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween(System.UIntPtr,System.UIntPtr,System.UIntPtr,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see langword="nuint"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see langword="nuint"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see langword="nuint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween(System.UIntPtr,System.UIntPtr,System.UIntPtr,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see langword="nuint"/> value to test.</param>
            <param name="minimum">The exclusive minimum <see langword="nuint"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <see langword="nuint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo(System.UIntPtr,System.UIntPtr,System.UIntPtr,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <param name="value">The input <see langword="nuint"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see langword="nuint"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see langword="nuint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or > <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo(System.UIntPtr,System.UIntPtr,System.UIntPtr,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <param name="value">The input <see langword="nuint"/> value to test.</param>
            <param name="minimum">The inclusive minimum <see langword="nuint"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <see langword="nuint"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt;= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="T:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper">
            <summary>
            Helper methods to efficiently throw exceptions.
            </summary>
            <summary>
            Helper methods to efficiently throw exceptions.
            </summary>
            <summary>
            Helper methods to efficiently throw exceptions.
            </summary>
            <summary>
            Helper methods to efficiently throw exceptions.
            </summary>
            <summary>
            Helper methods to efficiently throw exceptions.
            </summary>
            <summary>
            Helper methods to efficiently throw exceptions.
            </summary>
            <summary>
            Helper methods to efficiently throw exceptions.
            </summary>
            <summary>
            Helper methods to efficiently throw exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsEmpty``1(System.Span{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Span{``0},System.Span{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Span{``0},System.Span{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor``1(System.Int32,System.Span{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor``1(System.Int32,System.Span{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsEmpty``1(System.ReadOnlySpan{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.ReadOnlySpan{``0},System.Span{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Span{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor``1(System.Int32,System.ReadOnlySpan{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor``1(System.Int32,System.ReadOnlySpan{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsEmpty``1(System.Memory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Memory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Memory{``0},System.Memory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Memory{``0},System.Memory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor``1(System.Int32,System.Memory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor``1(System.Int32,System.Memory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsEmpty``1(System.ReadOnlyMemory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.ReadOnlyMemory{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.ReadOnlyMemory{``0},System.Memory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.ReadOnlyMemory{``0},System.Memory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor``1(System.Int32,System.ReadOnlyMemory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor``1(System.Int32,System.ReadOnlyMemory{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsEmpty``1(``0[],System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(``0[],System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo``1(``0[],System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan``1(``0[],System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan``1(``0[],System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(``0[],``0[],System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor``1(System.Int32,``0[],System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor``1(System.Int32,``0[],System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsEmpty``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Collections.Generic.List{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor``1(System.Int32,System.Collections.Generic.List{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor``1(System.Int32,System.Collections.Generic.List{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor``1(System.Int32,System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor``1(System.Int32,System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty``1(``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],System.Int32,System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo``1(``0[],``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo``1(``0[],``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor``1(System.Int32,System.Collections.Generic.IReadOnlyCollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor``1(System.Int32,``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor``1(System.Int32,System.Collections.Generic.IReadOnlyCollection{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor``1(System.Int32,``0[],System.String)"/> (or an overload) fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotEmptyWithSpan``1(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.Span{``0},System.String)"/> fails.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.Span`1"/> instance.</typeparam>
            <remarks>This method is needed because <see cref="T:System.Span`1"/> can't be used as a generic type parameter.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotEmptyWithReadOnlySpan``1(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(System.ReadOnlySpan{``0},System.String)"/> fails.
            </summary>
            <typeparam name="T">The item of items in the input <see cref="T:System.ReadOnlySpan`1"/> instance.</typeparam>
            <remarks>This method is needed because <see cref="T:System.ReadOnlySpan`1"/> can't be used as a generic type parameter.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotEmpty``1(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty``1(``0[],System.String)"/> (or an overload) fails.
            </summary>
            <typeparam name="T">The item of items in the input collection.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsDefault``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsDefault``1(``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of <see langword="struct"/> value type being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotDefault``1(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotDefault``1(``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of <see langword="struct"/> value type being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsEqualTo``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo``1(``0,``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotEqualTo``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo``1(``0,``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForBitwiseEqualTo``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsBitwiseEqualTo``1(``0,``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of input values being compared.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsLessThan``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan``1(``0,``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsLessThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo``1(``0,``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsGreaterThan``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan``1(``0,``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsGreaterThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo``1(``0,``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange``1(``0,``0,``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange``1(``0,``0,``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsBetween``1(``0,``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween``1(``0,``0,``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotBetween``1(``0,``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween``1(``0,``0,``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsBetweenOrEqualTo``1(``0,``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo``1(``0,``0,``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotBetweenOrEqualTo``1(``0,``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo``1(``0,``0,``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of values being tested.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsCloseTo(System.Int32,System.Int32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Int32,System.Int32,System.UInt32,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotCloseTo(System.Int32,System.Int32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Int32,System.Int32,System.UInt32,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsCloseTo(System.Int64,System.Int64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Int64,System.Int64,System.UInt64,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotCloseTo(System.Int64,System.Int64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Int64,System.Int64,System.UInt64,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsCloseTo(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Single,System.Single,System.Single,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotCloseTo(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Single,System.Single,System.Single,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsCloseTo(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Double,System.Double,System.Double,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotCloseTo(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Double,System.Double,System.Double,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsCloseTo(System.IntPtr,System.IntPtr,System.UIntPtr,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.IntPtr,System.IntPtr,System.UIntPtr,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotCloseTo(System.IntPtr,System.IntPtr,System.UIntPtr,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.IntPtr,System.IntPtr,System.UIntPtr,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForCanRead(System.IO.Stream,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.CanRead(System.IO.Stream,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForCanWrite(System.IO.Stream,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.CanWrite(System.IO.Stream,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForCanSeek(System.IO.Stream,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.CanSeek(System.IO.Stream,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsAtStartPosition(System.IO.Stream,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsAtStartPosition(System.IO.Stream,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNullOrEmpty(System.String,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNullOrEmpty(System.String,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNullOrWhitespace(System.String,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNullOrWhitespace(System.String,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty(System.String,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty(System.String,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsWhiteSpace(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsWhitespace(System.String,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotWhiteSpace(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotWhitespace(System.String,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo(System.String,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo(System.String,System.Int32,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeNotEqualTo(System.String,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo(System.String,System.Int32,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThan(System.String,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan(System.String,System.Int32,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeGreaterThanOrEqualTo(System.String,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo(System.String,System.Int32,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThan(System.String,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan(System.String,System.Int32,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo(System.String,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo(System.String,System.Int32,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeEqualTo(System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo(System.String,System.String,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasSizeLessThanOrEqualTo(System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo(System.String,System.String,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsInRangeFor(System.Int32,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor(System.Int32,System.String,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentOutOfRangeExceptionForIsNotInRangeFor(System.Int32,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor(System.Int32,System.String,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsCompleted(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsCompleted(System.Threading.Tasks.Task,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotCompleted(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCompleted(System.Threading.Tasks.Task,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsCompletedSuccessfully(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsCompletedSuccessfully(System.Threading.Tasks.Task,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotCompletedSuccessfully(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCompletedSuccessfully(System.Threading.Tasks.Task,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsFaulted(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsFaulted(System.Threading.Tasks.Task,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotFaulted(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotFaulted(System.Threading.Tasks.Task,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsCanceled(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsCanceled(System.Threading.Tasks.Task,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotCanceled(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCanceled(System.Threading.Tasks.Task,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasStatusEqualTo(System.Threading.Tasks.Task,System.Threading.Tasks.TaskStatus,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasStatusEqualTo(System.Threading.Tasks.Task,System.Threading.Tasks.TaskStatus,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForHasStatusNotEqualTo(System.Threading.Tasks.Task,System.Threading.Tasks.TaskStatus,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.HasStatusNotEqualTo(System.Threading.Tasks.Task,System.Threading.Tasks.TaskStatus,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.AssertString(System.Object)">
            <summary>
            Returns a formatted representation of the input value.
            </summary>
            <param name="obj">The input <see cref="T:System.Object"/> to format.</param>
            <returns>A formatted representation of <paramref name="obj"/> to display in error messages.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNull``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNull``1(``0,System.String)"/> (where <typeparamref name="T"/> is <see langword="class"/>) fails.
            </summary>
            <typeparam name="T">The type of the input value.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNull``1(``0,System.String)"/> (where <typeparamref name="T"/> is <see langword="struct"/>) fails.
            </summary>
            <typeparam name="T">The type of the input value.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentNullExceptionForIsNotNull``1(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNull``1(``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of the input value.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsOfType``1(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsOfType``1(System.Object,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of the input value.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotOfType``1(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotOfType``1(System.Object,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of the input value.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsOfType(System.Object,System.Type,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsOfType(System.Object,System.Type,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotOfType(System.Object,System.Type,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotOfType(System.Object,System.Type,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsAssignableToType``1(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsAssignableToType``1(System.Object,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type being checked against.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotAssignableToType``1(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotAssignableToType``1(System.Object,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type being checked against.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsAssignableToType(System.Object,System.Type,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsAssignableToType(System.Object,System.Type,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsNotAssignableToType(System.Object,System.Type,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsAssignableToType(System.Object,System.Type,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsReferenceEqualTo``1(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsReferenceEqualTo``1(``0,``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of input value being compared.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsReferenceNotEqualTo``1(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsReferenceNotEqualTo``1(``0,``0,System.String)"/> fails.
            </summary>
            <typeparam name="T">The type of input value being compared.</typeparam>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsTrue(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsTrue(System.Boolean,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsTrue(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsTrue(System.Boolean,System.String,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsFalse(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsFalse(System.Boolean,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.ThrowHelper.ThrowArgumentExceptionForIsFalse(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when <see cref="M:Microsoft.Toolkit.Diagnostics.Guard.IsFalse(System.Boolean,System.String,System.String)"/> fails.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsDefault``1(``0,System.String)">
            <summary>
            Asserts that the input value is <see langword="default"/>.
            </summary>
            <typeparam name="T">The type of <see langword="struct"/> value type being tested.</typeparam>
            <param name="value">The input value to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is not <see langword="default"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotDefault``1(``0,System.String)">
            <summary>
            Asserts that the input value is not <see langword="default"/>.
            </summary>
            <typeparam name="T">The type of <see langword="struct"/> value type being tested.</typeparam>
            <param name="value">The input value to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is <see langword="default"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must be equal to a specified value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T"/> value to test.</param>
            <param name="target">The target <typeparamref name="T"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is != <paramref name="target"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must be not equal to a specified value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T"/> value to test.</param>
            <param name="target">The target <typeparamref name="T"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is == <paramref name="target"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBitwiseEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must be a bitwise match with a specified value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T"/> value to test.</param>
            <param name="target">The target <typeparamref name="T"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is not a bitwise match for <paramref name="target"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThan``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must be less than a specified value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T"/> value to test.</param>
            <param name="maximum">The exclusive maximum <typeparamref name="T"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsLessThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must be less than or equal to a specified value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T"/> value to test.</param>
            <param name="maximum">The inclusive maximum <typeparamref name="T"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="maximum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThan``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must be greater than a specified value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T"/> value to test.</param>
            <param name="minimum">The exclusive minimum <typeparamref name="T"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsGreaterThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must be greater than or equal to a specified value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T"/> value to test.</param>
            <param name="minimum">The inclusive minimum <typeparamref name="T"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRange``1(``0,``0,``0,System.String)">
            <summary>
            Asserts that the input value must be in a given range.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T"/> value to test.</param>
            <param name="minimum">The inclusive minimum <typeparamref name="T"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <typeparamref name="T"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRange``1(``0,``0,``0,System.String)">
            <summary>
            Asserts that the input value must not be in a given range.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T"/> value to test.</param>
            <param name="minimum">The inclusive minimum <typeparamref name="T"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <typeparamref name="T"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetween``1(``0,``0,``0,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T"/> value to test.</param>
            <param name="minimum">The exclusive minimum <typeparamref name="T"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <typeparamref name="T"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/> or >= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetween``1(``0,``0,``0,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T"/> value to test.</param>
            <param name="minimum">The exclusive minimum <typeparamref name="T"/> value that is accepted.</param>
            <param name="maximum">The exclusive maximum <typeparamref name="T"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > <paramref name="minimum"/> or &lt; <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsBetweenOrEqualTo``1(``0,``0,``0,System.String)">
            <summary>
            Asserts that the input value must be in a given interval.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T"/> value to test.</param>
            <param name="minimum">The inclusive minimum <typeparamref name="T"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <typeparamref name="T"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or > <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotBetweenOrEqualTo``1(``0,``0,``0,System.String)">
            <summary>
            Asserts that the input value must not be in a given interval.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T"/> value to test.</param>
            <param name="minimum">The inclusive minimum <typeparamref name="T"/> value that is accepted.</param>
            <param name="maximum">The inclusive maximum <typeparamref name="T"/> value that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is >= <paramref name="minimum"/> or &lt;= <paramref name="maximum"/>.</exception>
            <remarks>
            This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
            The method is generic to avoid boxing the parameters, if they are value types.
            </remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Int32,System.Int32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int32"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Int32"/> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value"/> and <paramref name="target"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value"/> - <paramref name="target"/>) > <paramref name="delta"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Int32,System.Int32,System.UInt32,System.String)">
            <summary>
            Asserts that the input value must not be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int32"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Int32"/> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value"/> and <paramref name="target"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value"/> - <paramref name="target"/>) &lt;= <paramref name="delta"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Int64,System.Int64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int64"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Int64"/> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value"/> and <paramref name="target"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value"/> - <paramref name="target"/>) > <paramref name="delta"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Int64,System.Int64,System.UInt64,System.String)">
            <summary>
            Asserts that the input value must not be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Int64"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Int64"/> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value"/> and <paramref name="target"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value"/> - <paramref name="target"/>) &lt;= <paramref name="delta"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Single"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Single"/> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value"/> and <paramref name="target"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value"/> - <paramref name="target"/>) > <paramref name="delta"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the input value must not be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Single"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Single"/> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value"/> and <paramref name="target"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value"/> - <paramref name="target"/>) &lt;= <paramref name="delta"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Double"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Double"/> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value"/> and <paramref name="target"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value"/> - <paramref name="target"/>) > <paramref name="delta"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that the input value must not be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.Double"/> value to test.</param>
            <param name="target">The target <see cref="T:System.Double"/> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value"/> and <paramref name="target"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value"/> - <paramref name="target"/>) &lt;= <paramref name="delta"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsCloseTo(System.IntPtr,System.IntPtr,System.UIntPtr,System.String)">
            <summary>
            Asserts that the input value must be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see langword="nint"/> value to test.</param>
            <param name="target">The target <see langword="nint"/> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value"/> and <paramref name="target"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value"/> - <paramref name="target"/>) > <paramref name="delta"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCloseTo(System.IntPtr,System.IntPtr,System.UIntPtr,System.String)">
            <summary>
            Asserts that the input value must not be within a given distance from a specified value.
            </summary>
            <param name="value">The input <see langword="nint"/> value to test.</param>
            <param name="target">The target <see langword="nint"/> value to test for.</param>
            <param name="delta">The maximum distance to allow between <paramref name="value"/> and <paramref name="target"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if (<paramref name="value"/> - <paramref name="target"/>) &lt;= <paramref name="delta"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNull``1(``0,System.String)">
            <summary>
            Asserts that the input value is <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of reference value type being tested.</typeparam>
            <param name="value">The input value to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is not <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNull``1(System.Nullable{``0},System.String)">
            <summary>
            Asserts that the input value is <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of nullable value type being tested.</typeparam>
            <param name="value">The input value to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is not <see langword="null"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNull``1(``0,System.String)">
            <summary>
            Asserts that the input value is not <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of reference value type being tested.</typeparam>
            <param name="value">The input value to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Asserts that the input value is not <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of nullable value type being tested.</typeparam>
            <param name="value">The input value to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see langword="null"/>.</exception>
            <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsOfType``1(System.Object,System.String)">
            <summary>
            Asserts that the input value is of a specific type.
            </summary>
            <typeparam name="T">The type of the input value.</typeparam>
            <param name="value">The input <see cref="T:System.Object"/> to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is not of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotOfType``1(System.Object,System.String)">
            <summary>
            Asserts that the input value is not of a specific type.
            </summary>
            <typeparam name="T">The type of the input value.</typeparam>
            <param name="value">The input <see cref="T:System.Object"/> to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsOfType(System.Object,System.Type,System.String)">
            <summary>
            Asserts that the input value is of a specific type.
            </summary>
            <param name="value">The input <see cref="T:System.Object"/> to test.</param>
            <param name="type">The type to look for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the type of <paramref name="value"/> is not the same as <paramref name="type"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotOfType(System.Object,System.Type,System.String)">
            <summary>
            Asserts that the input value is not of a specific type.
            </summary>
            <param name="value">The input <see cref="T:System.Object"/> to test.</param>
            <param name="type">The type to look for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the type of <paramref name="value"/> is the same as <paramref name="type"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsAssignableToType``1(System.Object,System.String)">
            <summary>
            Asserts that the input value can be assigned to a specified type.
            </summary>
            <typeparam name="T">The type to check the input value against.</typeparam>
            <param name="value">The input <see cref="T:System.Object"/> to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> can't be assigned to type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotAssignableToType``1(System.Object,System.String)">
            <summary>
            Asserts that the input value can't be assigned to a specified type.
            </summary>
            <typeparam name="T">The type to check the input value against.</typeparam>
            <param name="value">The input <see cref="T:System.Object"/> to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> can be assigned to type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsAssignableToType(System.Object,System.Type,System.String)">
            <summary>
            Asserts that the input value can be assigned to a specified type.
            </summary>
            <param name="value">The input <see cref="T:System.Object"/> to test.</param>
            <param name="type">The type to look for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> can't be assigned to <paramref name="type"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotAssignableToType(System.Object,System.Type,System.String)">
            <summary>
            Asserts that the input value can't be assigned to a specified type.
            </summary>
            <param name="value">The input <see cref="T:System.Object"/> to test.</param>
            <param name="type">The type to look for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> can be assigned to <paramref name="type"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsReferenceEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must be the same instance as the target value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T"/> value to test.</param>
            <param name="target">The target <typeparamref name="T"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is not the same instance as <paramref name="target"/>.</exception>
            <remarks>The method is generic to prevent using it with value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsReferenceNotEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that the input value must not be the same instance as the target value.
            </summary>
            <typeparam name="T">The type of input values to compare.</typeparam>
            <param name="value">The input <typeparamref name="T"/> value to test.</param>
            <param name="target">The target <typeparamref name="T"/> value to test for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is the same instance as <paramref name="target"/>.</exception>
            <remarks>The method is generic to prevent using it with value types.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsTrue(System.Boolean,System.String)">
            <summary>
            Asserts that the input value must be <see langword="true"/>.
            </summary>
            <param name="value">The input <see cref="T:System.Boolean"/> to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is <see langword="false"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Asserts that the input value must be <see langword="true"/>.
            </summary>
            <param name="value">The input <see cref="T:System.Boolean"/> to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <param name="message">A message to display if <paramref name="value"/> is <see langword="false"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is <see langword="false"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsFalse(System.Boolean,System.String)">
            <summary>
            Asserts that the input value must be <see langword="false"/>.
            </summary>
            <param name="value">The input <see cref="T:System.Boolean"/> to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is <see langword="true"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsFalse(System.Boolean,System.String,System.String)">
            <summary>
            Asserts that the input value must be <see langword="false"/>.
            </summary>
            <param name="value">The input <see cref="T:System.Boolean"/> to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <param name="message">A message to display if <paramref name="value"/> is <see langword="true"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is <see langword="true"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.CanRead(System.IO.Stream,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.IO.Stream"/> instance must support reading.
            </summary>
            <param name="stream">The input <see cref="T:System.IO.Stream"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stream"/> doesn't support reading.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.CanWrite(System.IO.Stream,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.IO.Stream"/> instance must support writing.
            </summary>
            <param name="stream">The input <see cref="T:System.IO.Stream"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stream"/> doesn't support writing.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.CanSeek(System.IO.Stream,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.IO.Stream"/> instance must support seeking.
            </summary>
            <param name="stream">The input <see cref="T:System.IO.Stream"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stream"/> doesn't support seeking.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsAtStartPosition(System.IO.Stream,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.IO.Stream"/> instance must be at the starting position.
            </summary>
            <param name="stream">The input <see cref="T:System.IO.Stream"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stream"/> is not at the starting position.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNullOrEmpty(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must be <see langword="null"/> or empty.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text"/> is neither <see langword="null"/> nor empty.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNullOrEmpty(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must not be <see langword="null"/> or empty.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="text"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text"/> is empty.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must be <see langword="null"/> or whitespace.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text"/> is neither <see langword="null"/> nor whitespace.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNullOrWhitespace(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must be <see langword="null"/> or whitespace.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text"/> is neither <see langword="null"/> nor whitespace.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must not be <see langword="null"/> or whitespace.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="text"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text"/> is whitespace.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotNullOrWhitespace(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must not be <see langword="null"/> or whitespace.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text"/> is <see langword="null"/> or whitespace.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsEmpty(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must be empty.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text"/> is empty.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotEmpty(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must not be empty.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text"/> is empty.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsWhiteSpace(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must be whitespace.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text"/> is neither <see langword="null"/> nor whitespace.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsWhitespace(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must be whitespace.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text"/> is neither <see langword="null"/> nor whitespace.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotWhiteSpace(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must not be <see langword="null"/> or whitespace.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text"/> is <see langword="null"/> or whitespace.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotWhitespace(System.String,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must not be <see langword="null"/> or whitespace.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="text"/> is <see langword="null"/> or whitespace.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo(System.String,System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must have a size of a specified value.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text"/> is != <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeNotEqualTo(System.String,System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must have a size not equal to a specified value.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text"/> is == <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThan(System.String,System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must have a size over a specified value.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text"/> is &lt;= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeGreaterThanOrEqualTo(System.String,System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must have a size of at least specified value.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text"/> is &lt; <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThan(System.String,System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must have a size of less than a specified value.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text"/> is >= <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo(System.String,System.Int32,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.String"/> instance must have a size of less than or equal to a specified value.
            </summary>
            <param name="text">The input <see cref="T:System.String"/> instance to check the size for.</param>
            <param name="size">The target size to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="text"/> is > <paramref name="size"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeEqualTo(System.String,System.String,System.String)">
            <summary>
            Asserts that the source <see cref="T:System.String"/> instance must have the same size of a destination <see cref="T:System.String"/> instance.
            </summary>
            <param name="source">The source <see cref="T:System.String"/> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.String"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is != the one of <paramref name="destination"/>.</exception>
            <remarks>The <see cref="T:System.String"/> type is immutable, but the name of this API is kept for consistency with the other overloads.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasSizeLessThanOrEqualTo(System.String,System.String,System.String)">
            <summary>
            Asserts that the source <see cref="T:System.String"/> instance must have a size of less than or equal to that of a destination <see cref="T:System.String"/> instance.
            </summary>
            <param name="source">The source <see cref="T:System.String"/> instance to check the size for.</param>
            <param name="destination">The destination <see cref="T:System.String"/> instance to check the size for.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if the size of <paramref name="source"/> is > the one of <paramref name="destination"/>.</exception>
            <remarks>The <see cref="T:System.String"/> type is immutable, but the name of this API is kept for consistency with the other overloads.</remarks>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsInRangeFor(System.Int32,System.String,System.String)">
            <summary>
            Asserts that the input index is valid for a given <see cref="T:System.String"/> instance.
            </summary>
            <param name="index">The input index to be used to access <paramref name="text"/>.</param>
            <param name="text">The input <see cref="T:System.String"/> instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is not valid to access <paramref name="text"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotInRangeFor(System.Int32,System.String,System.String)">
            <summary>
            Asserts that the input index is not valid for a given <see cref="T:System.String"/> instance.
            </summary>
            <param name="index">The input index to be used to access <paramref name="text"/>.</param>
            <param name="text">The input <see cref="T:System.String"/> instance to use to validate <paramref name="index"/>.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is valid to access <paramref name="text"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsCompleted(System.Threading.Tasks.Task,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task"/> instance is in a completed state.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task"/> is not in a completed state.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCompleted(System.Threading.Tasks.Task,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task"/> instance is not in a completed state.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task"/> is in a completed state.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsCompletedSuccessfully(System.Threading.Tasks.Task,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task"/> instance has been completed successfully.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task"/> has not been completed successfully.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCompletedSuccessfully(System.Threading.Tasks.Task,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task"/> instance has not been completed successfully.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task"/> has been completed successfully.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsFaulted(System.Threading.Tasks.Task,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task"/> instance is faulted.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task"/> is not faulted.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotFaulted(System.Threading.Tasks.Task,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task"/> instance is not faulted.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task"/> is faulted.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsCanceled(System.Threading.Tasks.Task,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task"/> instance is canceled.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task"/> is not canceled.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.IsNotCanceled(System.Threading.Tasks.Task,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task"/> instance is not canceled.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task"/> instance to test.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task"/> is canceled.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasStatusEqualTo(System.Threading.Tasks.Task,System.Threading.Tasks.TaskStatus,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task"/> instance has a specific status.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task"/> instance to test.</param>
            <param name="status">The task status that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task"/> doesn't match <paramref name="status"/>.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.Guard.HasStatusNotEqualTo(System.Threading.Tasks.Task,System.Threading.Tasks.TaskStatus,System.String)">
            <summary>
            Asserts that the input <see cref="T:System.Threading.Tasks.Task"/> instance has not a specific status.
            </summary>
            <param name="task">The input <see cref="T:System.Threading.Tasks.Task"/> instance to test.</param>
            <param name="status">The task status that is accepted.</param>
            <param name="name">The name of the input parameter being tested.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="task"/> matches <paramref name="status"/>.</exception>
        </member>
        <member name="T:Microsoft.Toolkit.Diagnostics.ThrowHelper">
            <summary>
            Helper methods to efficiently throw exceptions.
            </summary>
            <summary>
            Helper methods to efficiently throw exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArrayTypeMismatchException">
            <summary>
            Throws a new <see cref="T:System.ArrayTypeMismatchException"/>.
            </summary>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArrayTypeMismatchException(System.String)">
            <summary>
            Throws a new <see cref="T:System.ArrayTypeMismatchException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArrayTypeMismatchException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArrayTypeMismatchException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentException">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentException(System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArgumentException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentException(System.String,System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArgumentException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentNullException">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentNullException(System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentNullException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArgumentNullException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentNullException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeException">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeException(System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeException(System.String,System.Object,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="value">The current argument value.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowCOMException">
            <summary>
            Throws a new <see cref="T:System.Runtime.InteropServices.COMException"/>.
            </summary>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown with no paarameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowCOMException(System.String)">
            <summary>
            Throws a new <see cref="T:System.Runtime.InteropServices.COMException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowCOMException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.Runtime.InteropServices.COMException"/>.
            </summary>
            <param name="message">The argument name.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowCOMException(System.String,System.Int32)">
            <summary>
            Throws a new <see cref="T:System.Runtime.InteropServices.COMException"/>.
            </summary>
            <param name="message">The argument name.</param>
            <param name="error">The HRESULT of the errror to include.</param>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowExternalException">
            <summary>
            Throws a new <see cref="T:System.Runtime.InteropServices.ExternalException"/>.
            </summary>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowExternalException(System.String)">
            <summary>
            Throws a new <see cref="T:System.Runtime.InteropServices.ExternalException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowExternalException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.Runtime.InteropServices.ExternalException"/>.
            </summary>
            <param name="message">The argument name.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowExternalException(System.String,System.Int32)">
            <summary>
            Throws a new <see cref="T:System.Runtime.InteropServices.ExternalException"/>.
            </summary>
            <param name="message">The argument name.</param>
            <param name="error">The HRESULT of the errror to include.</param>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowFormatException">
            <summary>
            Throws a new <see cref="T:System.FormatException"/>.
            </summary>
            <exception cref="T:System.FormatException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowFormatException(System.String)">
            <summary>
            Throws a new <see cref="T:System.FormatException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.FormatException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowFormatException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.FormatException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.FormatException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInsufficientMemoryException">
            <summary>
            Throws a new <see cref="T:System.InsufficientMemoryException"/>.
            </summary>
            <exception cref="T:System.InsufficientMemoryException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInsufficientMemoryException(System.String)">
            <summary>
            Throws a new <see cref="T:System.InsufficientMemoryException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.InsufficientMemoryException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInsufficientMemoryException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.InsufficientMemoryException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.InsufficientMemoryException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInvalidDataException">
            <summary>
            Throws a new <see cref="T:System.IO.InvalidDataException"/>.
            </summary>
            <exception cref="T:System.IO.InvalidDataException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInvalidDataException(System.String)">
            <summary>
            Throws a new <see cref="T:System.IO.InvalidDataException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.IO.InvalidDataException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInvalidDataException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.IO.InvalidDataException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.IO.InvalidDataException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInvalidOperationException">
            <summary>
            Throws a new <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInvalidOperationException(System.String)">
            <summary>
            Throws a new <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.InvalidOperationException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInvalidOperationException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.InvalidOperationException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowLockRecursionException">
            <summary>
            Throws a new <see cref="T:System.Threading.LockRecursionException"/>.
            </summary>
            <exception cref="T:System.Threading.LockRecursionException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowLockRecursionException(System.String)">
            <summary>
            Throws a new <see cref="T:System.Threading.LockRecursionException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.Threading.LockRecursionException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowLockRecursionException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.Threading.LockRecursionException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.Threading.LockRecursionException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingFieldException">
            <summary>
            Throws a new <see cref="T:System.MissingFieldException"/>.
            </summary>
            <exception cref="T:System.MissingFieldException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingFieldException(System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingFieldException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.MissingFieldException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingFieldException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.MissingFieldException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.MissingFieldException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingFieldException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingFieldException"/>.
            </summary>
            <param name="className">The target class being inspected.</param>
            <param name="fieldName">The target field being retrieved.</param>
            <exception cref="T:System.MissingFieldException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingMemberException">
            <summary>
            Throws a new <see cref="T:System.MissingMemberException"/>.
            </summary>
            <exception cref="T:System.MissingMemberException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingMemberException(System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingMemberException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.MissingMemberException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingMemberException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.MissingMemberException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.MissingMemberException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingMemberException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingMemberException"/>.
            </summary>
            <param name="className">The target class being inspected.</param>
            <param name="memberName">The target member being retrieved.</param>
            <exception cref="T:System.MissingMemberException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingMethodException">
            <summary>
            Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <exception cref="T:System.MissingMethodException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingMethodException(System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.MissingMethodException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingMethodException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.MissingMethodException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingMethodException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <param name="className">The target class being inspected.</param>
            <param name="methodName">The target method being retrieved.</param>
            <exception cref="T:System.MissingMethodException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowNotSupportedException">
            <summary>
            Throws a new <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowNotSupportedException(System.String)">
            <summary>
            Throws a new <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.NotSupportedException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowNotSupportedException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.NotSupportedException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowObjectDisposedException(System.String)">
            <summary>
            Throws a new <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <param name="objectName">The name of the disposed object.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowObjectDisposedException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <param name="objectName">The name of the disposed object.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowObjectDisposedException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <param name="objectName">The name of the disposed object.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowOperationCanceledException">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <exception cref="T:System.OperationCanceledException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowOperationCanceledException(System.String)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowOperationCanceledException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowOperationCanceledException(System.Threading.CancellationToken)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> in use.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowOperationCanceledException(System.String,System.Threading.CancellationToken)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> in use.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowOperationCanceledException(System.String,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> in use.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowPlatformNotSupportedException">
            <summary>
            Throws a new <see cref="T:System.PlatformNotSupportedException"/>.
            </summary>
            <exception cref="T:System.PlatformNotSupportedException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowPlatformNotSupportedException(System.String)">
            <summary>
            Throws a new <see cref="T:System.PlatformNotSupportedException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.PlatformNotSupportedException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowPlatformNotSupportedException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.PlatformNotSupportedException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.PlatformNotSupportedException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowSynchronizationLockException">
            <summary>
            Throws a new <see cref="T:System.Threading.SynchronizationLockException"/>.
            </summary>
            <exception cref="T:System.Threading.SynchronizationLockException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowSynchronizationLockException(System.String)">
            <summary>
            Throws a new <see cref="T:System.Threading.SynchronizationLockException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.Threading.SynchronizationLockException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowSynchronizationLockException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.Threading.SynchronizationLockException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.Threading.SynchronizationLockException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowTimeoutException">
            <summary>
            Throws a new <see cref="T:System.TimeoutException"/>.
            </summary>
            <exception cref="T:System.TimeoutException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowTimeoutException(System.String)">
            <summary>
            Throws a new <see cref="T:System.TimeoutException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.TimeoutException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowTimeoutException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.TimeoutException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.TimeoutException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowUnauthorizedAccessException">
            <summary>
            Throws a new <see cref="T:System.UnauthorizedAccessException"/>.
            </summary>
            <exception cref="T:System.UnauthorizedAccessException">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowUnauthorizedAccessException(System.String)">
            <summary>
            Throws a new <see cref="T:System.UnauthorizedAccessException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.UnauthorizedAccessException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowUnauthorizedAccessException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.UnauthorizedAccessException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.UnauthorizedAccessException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowWin32Exception">
            <summary>
            Throws a new <see cref="T:System.ComponentModel.Win32Exception"/>.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown with no parameters.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowWin32Exception(System.Int32)">
            <summary>
            Throws a new <see cref="T:System.ComponentModel.Win32Exception"/>.
            </summary>
            <param name="error">The Win32 error code associated with this exception.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowWin32Exception(System.Int32,System.String)">
            <summary>
            Throws a new <see cref="T:System.ComponentModel.Win32Exception"/>.
            </summary>
            <param name="error">The Win32 error code associated with this exception.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowWin32Exception(System.String)">
            <summary>
            Throws a new <see cref="T:System.ComponentModel.Win32Exception"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowWin32Exception(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ComponentModel.Win32Exception"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArrayTypeMismatchException``1">
            <summary>
            Throws a new <see cref="T:System.ArrayTypeMismatchException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArrayTypeMismatchException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.ArrayTypeMismatchException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArrayTypeMismatchException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArrayTypeMismatchException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentException``1">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.ArgumentException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArgumentException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentException``1(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentException``1(System.String,System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArgumentException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentNullException``1">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.ArgumentNullException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentNullException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentNullException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArgumentNullException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentNullException``1(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeException``1">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeException``1(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowArgumentOutOfRangeException``1(System.String,System.Object,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <param name="value">The current argument value.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowCOMException``1">
            <summary>
            Throws a new <see cref="T:System.Runtime.InteropServices.COMException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowCOMException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.Runtime.InteropServices.COMException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowCOMException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.Runtime.InteropServices.COMException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The argument name.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowCOMException``1(System.String,System.Int32)">
            <summary>
            Throws a new <see cref="T:System.Runtime.InteropServices.COMException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The argument name.</param>
            <param name="error">The HRESULT of the errror to include.</param>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowExternalException``1">
            <summary>
            Throws a new <see cref="T:System.Runtime.InteropServices.ExternalException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowExternalException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.Runtime.InteropServices.ExternalException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowExternalException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.Runtime.InteropServices.ExternalException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The argument name.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowExternalException``1(System.String,System.Int32)">
            <summary>
            Throws a new <see cref="T:System.Runtime.InteropServices.ExternalException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The argument name.</param>
            <param name="error">The HRESULT of the errror to include.</param>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowFormatException``1">
            <summary>
            Throws a new <see cref="T:System.FormatException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.FormatException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowFormatException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.FormatException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.FormatException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowFormatException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.FormatException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.FormatException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInsufficientMemoryException``1">
            <summary>
            Throws a new <see cref="T:System.InsufficientMemoryException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.InsufficientMemoryException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInsufficientMemoryException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.InsufficientMemoryException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.InsufficientMemoryException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInsufficientMemoryException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.InsufficientMemoryException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.InsufficientMemoryException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInvalidDataException``1">
            <summary>
            Throws a new <see cref="T:System.IO.InvalidDataException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.IO.InvalidDataException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInvalidDataException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.IO.InvalidDataException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.IO.InvalidDataException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInvalidDataException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.IO.InvalidDataException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.IO.InvalidDataException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInvalidOperationException``1">
            <summary>
            Throws a new <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInvalidOperationException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.InvalidOperationException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowInvalidOperationException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.InvalidOperationException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowLockRecursionException``1">
            <summary>
            Throws a new <see cref="T:System.Threading.LockRecursionException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.Threading.LockRecursionException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowLockRecursionException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.Threading.LockRecursionException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.Threading.LockRecursionException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowLockRecursionException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.Threading.LockRecursionException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.Threading.LockRecursionException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingFieldException``1">
            <summary>
            Throws a new <see cref="T:System.MissingFieldException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.MissingFieldException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingFieldException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingFieldException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.MissingFieldException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingFieldException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.MissingFieldException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.MissingFieldException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingFieldException``1(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingFieldException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="className">The target class being inspected.</param>
            <param name="fieldName">The target field being retrieved.</param>
            <exception cref="T:System.MissingFieldException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingMemberException``1">
            <summary>
            Throws a new <see cref="T:System.MissingMemberException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.MissingMemberException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingMemberException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingMemberException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.MissingMemberException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingMemberException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.MissingMemberException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.MissingMemberException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingMemberException``1(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingMemberException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="className">The target class being inspected.</param>
            <param name="memberName">The target member being retrieved.</param>
            <exception cref="T:System.MissingMemberException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingMethodException``1">
            <summary>
            Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.MissingMethodException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingMethodException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.MissingMethodException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingMethodException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.MissingMethodException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowMissingMethodException``1(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="className">The target class being inspected.</param>
            <param name="methodName">The target method being retrieved.</param>
            <exception cref="T:System.MissingMethodException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowNotSupportedException``1">
            <summary>
            Throws a new <see cref="T:System.NotSupportedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.NotSupportedException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowNotSupportedException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.NotSupportedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.NotSupportedException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowNotSupportedException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.NotSupportedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.NotSupportedException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowObjectDisposedException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="objectName">The name of the disposed object.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowObjectDisposedException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="objectName">The name of the disposed object.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowObjectDisposedException``1(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="objectName">The name of the disposed object.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowOperationCanceledException``1">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.OperationCanceledException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowOperationCanceledException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowOperationCanceledException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowOperationCanceledException``1(System.Threading.CancellationToken)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> in use.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowOperationCanceledException``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> in use.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowOperationCanceledException``1(System.String,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> in use.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowPlatformNotSupportedException``1">
            <summary>
            Throws a new <see cref="T:System.PlatformNotSupportedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.PlatformNotSupportedException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowPlatformNotSupportedException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.PlatformNotSupportedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.PlatformNotSupportedException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowPlatformNotSupportedException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.PlatformNotSupportedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.PlatformNotSupportedException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowSynchronizationLockException``1">
            <summary>
            Throws a new <see cref="T:System.Threading.SynchronizationLockException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.Threading.SynchronizationLockException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowSynchronizationLockException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.Threading.SynchronizationLockException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.Threading.SynchronizationLockException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowSynchronizationLockException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.Threading.SynchronizationLockException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.Threading.SynchronizationLockException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowTimeoutException``1">
            <summary>
            Throws a new <see cref="T:System.TimeoutException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.TimeoutException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowTimeoutException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.TimeoutException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.TimeoutException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowTimeoutException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.TimeoutException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.TimeoutException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowUnauthorizedAccessException``1">
            <summary>
            Throws a new <see cref="T:System.UnauthorizedAccessException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.UnauthorizedAccessException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowUnauthorizedAccessException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.UnauthorizedAccessException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.UnauthorizedAccessException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowUnauthorizedAccessException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.UnauthorizedAccessException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.UnauthorizedAccessException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowWin32Exception``1">
            <summary>
            Throws a new <see cref="T:System.ComponentModel.Win32Exception"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowWin32Exception``1(System.Int32)">
            <summary>
            Throws a new <see cref="T:System.ComponentModel.Win32Exception"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="error">The Win32 error code associated with this exception.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowWin32Exception``1(System.Int32,System.String)">
            <summary>
            Throws a new <see cref="T:System.ComponentModel.Win32Exception"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="error">The Win32 error code associated with this exception.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowWin32Exception``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.ComponentModel.Win32Exception"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Diagnostics.ThrowHelper.ThrowWin32Exception``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ComponentModel.Win32Exception"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
    </members>
</doc>
