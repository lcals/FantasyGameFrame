// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Fantasy.HashCacheInfo
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// AssetInfo
public struct AssetInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static AssetInfo GetRootAsAssetInfo(ByteBuffer _bb) { return GetRootAsAssetInfo(_bb, new AssetInfo()); }
  public static AssetInfo GetRootAsAssetInfo(ByteBuffer _bb, AssetInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AssetInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  ///version
  public int Version { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  ///bundle details
  public Fantasy.HashCacheInfo.BundleDetails? BundleDetails(int j) { int o = __p.__offset(6); return o != 0 ? (Fantasy.HashCacheInfo.BundleDetails?)(new Fantasy.HashCacheInfo.BundleDetails()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BundleDetailsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Fantasy.HashCacheInfo.AssetInfo> CreateAssetInfo(FlatBufferBuilder builder,
      int version = 0,
      VectorOffset bundle_detailsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    AssetInfo.AddBundleDetails(builder, bundle_detailsOffset);
    AssetInfo.AddVersion(builder, version);
    return AssetInfo.EndAssetInfo(builder);
  }

  public static void StartAssetInfo(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddVersion(FlatBufferBuilder builder, int version) { builder.AddInt(0, version, 0); }
  public static void AddBundleDetails(FlatBufferBuilder builder, VectorOffset bundleDetailsOffset) { builder.AddOffset(1, bundleDetailsOffset.Value, 0); }
  public static VectorOffset CreateBundleDetailsVector(FlatBufferBuilder builder, Offset<Fantasy.HashCacheInfo.BundleDetails>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBundleDetailsVectorBlock(FlatBufferBuilder builder, Offset<Fantasy.HashCacheInfo.BundleDetails>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBundleDetailsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Fantasy.HashCacheInfo.BundleDetails>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBundleDetailsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Fantasy.HashCacheInfo.BundleDetails>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBundleDetailsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Fantasy.HashCacheInfo.AssetInfo> EndAssetInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Fantasy.HashCacheInfo.AssetInfo>(o);
  }
  public static void FinishAssetInfoBuffer(FlatBufferBuilder builder, Offset<Fantasy.HashCacheInfo.AssetInfo> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAssetInfoBuffer(FlatBufferBuilder builder, Offset<Fantasy.HashCacheInfo.AssetInfo> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AssetInfoT UnPack() {
    var _o = new AssetInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AssetInfoT _o) {
    _o.Version = this.Version;
    _o.BundleDetails = new List<Fantasy.HashCacheInfo.BundleDetailsT>();
    for (var _j = 0; _j < this.BundleDetailsLength; ++_j) {_o.BundleDetails.Add(this.BundleDetails(_j).HasValue ? this.BundleDetails(_j).Value.UnPack() : null);}
  }
  public static Offset<Fantasy.HashCacheInfo.AssetInfo> Pack(FlatBufferBuilder builder, AssetInfoT _o) {
    if (_o == null) return default(Offset<Fantasy.HashCacheInfo.AssetInfo>);
    var _bundle_details = default(VectorOffset);
    if (_o.BundleDetails != null) {
      var __bundle_details = new Offset<Fantasy.HashCacheInfo.BundleDetails>[_o.BundleDetails.Count];
      for (var _j = 0; _j < __bundle_details.Length; ++_j) { __bundle_details[_j] = Fantasy.HashCacheInfo.BundleDetails.Pack(builder, _o.BundleDetails[_j]); }
      _bundle_details = CreateBundleDetailsVector(builder, __bundle_details);
    }
    return CreateAssetInfo(
      builder,
      _o.Version,
      _bundle_details);
  }
}

public class AssetInfoT
{
  [Newtonsoft.Json.JsonProperty("version")]
  public int Version { get; set; }
  [Newtonsoft.Json.JsonProperty("bundle_details")]
  public List<Fantasy.HashCacheInfo.BundleDetailsT> BundleDetails { get; set; }

  public AssetInfoT() {
    this.Version = 0;
    this.BundleDetails = null;
  }

  public static AssetInfoT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AssetInfoT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AssetInfoT DeserializeFromBinary(byte[] fbBuffer) {
    return AssetInfo.GetRootAsAssetInfo(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AssetInfo.FinishAssetInfoBuffer(fbb, AssetInfo.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
