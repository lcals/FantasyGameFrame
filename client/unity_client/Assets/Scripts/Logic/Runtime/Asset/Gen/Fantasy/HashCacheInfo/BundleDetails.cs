// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Fantasy.HashCacheInfo
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

///AssetCacheInfo
public struct BundleDetails : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static BundleDetails GetRootAsBundleDetails(ByteBuffer _bb) { return GetRootAsBundleDetails(_bb, new BundleDetails()); }
  public static BundleDetails GetRootAsBundleDetails(ByteBuffer _bb, BundleDetails obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BundleDetails __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  ///file name
  public string FileName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFileNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFileNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFileNameArray() { return __p.__vector_as_array<byte>(4); }
  ///crc
  public string Crc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCrcBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCrcBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCrcArray() { return __p.__vector_as_array<byte>(6); }
  ///hash
  public string Hash { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHashBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetHashBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetHashArray() { return __p.__vector_as_array<byte>(8); }
  ///dependencies
  public string Dependencies(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DependenciesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Fantasy.HashCacheInfo.BundleDetails> CreateBundleDetails(FlatBufferBuilder builder,
      StringOffset file_nameOffset = default(StringOffset),
      StringOffset crcOffset = default(StringOffset),
      StringOffset hashOffset = default(StringOffset),
      VectorOffset dependenciesOffset = default(VectorOffset)) {
    builder.StartTable(4);
    BundleDetails.AddDependencies(builder, dependenciesOffset);
    BundleDetails.AddHash(builder, hashOffset);
    BundleDetails.AddCrc(builder, crcOffset);
    BundleDetails.AddFileName(builder, file_nameOffset);
    return BundleDetails.EndBundleDetails(builder);
  }

  public static void StartBundleDetails(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddFileName(FlatBufferBuilder builder, StringOffset fileNameOffset) { builder.AddOffset(0, fileNameOffset.Value, 0); }
  public static void AddCrc(FlatBufferBuilder builder, StringOffset crcOffset) { builder.AddOffset(1, crcOffset.Value, 0); }
  public static void AddHash(FlatBufferBuilder builder, StringOffset hashOffset) { builder.AddOffset(2, hashOffset.Value, 0); }
  public static void AddDependencies(FlatBufferBuilder builder, VectorOffset dependenciesOffset) { builder.AddOffset(3, dependenciesOffset.Value, 0); }
  public static VectorOffset CreateDependenciesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDependenciesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDependenciesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDependenciesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDependenciesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Fantasy.HashCacheInfo.BundleDetails> EndBundleDetails(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Fantasy.HashCacheInfo.BundleDetails>(o);
  }
  public BundleDetailsT UnPack() {
    var _o = new BundleDetailsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BundleDetailsT _o) {
    _o.FileName = this.FileName;
    _o.Crc = this.Crc;
    _o.Hash = this.Hash;
    _o.Dependencies = new List<string>();
    for (var _j = 0; _j < this.DependenciesLength; ++_j) {_o.Dependencies.Add(this.Dependencies(_j));}
  }
  public static Offset<Fantasy.HashCacheInfo.BundleDetails> Pack(FlatBufferBuilder builder, BundleDetailsT _o) {
    if (_o == null) return default(Offset<Fantasy.HashCacheInfo.BundleDetails>);
    var _file_name = _o.FileName == null ? default(StringOffset) : builder.CreateString(_o.FileName);
    var _crc = _o.Crc == null ? default(StringOffset) : builder.CreateString(_o.Crc);
    var _hash = _o.Hash == null ? default(StringOffset) : builder.CreateString(_o.Hash);
    var _dependencies = default(VectorOffset);
    if (_o.Dependencies != null) {
      var __dependencies = new StringOffset[_o.Dependencies.Count];
      for (var _j = 0; _j < __dependencies.Length; ++_j) { __dependencies[_j] = builder.CreateString(_o.Dependencies[_j]); }
      _dependencies = CreateDependenciesVector(builder, __dependencies);
    }
    return CreateBundleDetails(
      builder,
      _file_name,
      _crc,
      _hash,
      _dependencies);
  }
}

public class BundleDetailsT
{
  [Newtonsoft.Json.JsonProperty("file_name")]
  public string FileName { get; set; }
  [Newtonsoft.Json.JsonProperty("crc")]
  public string Crc { get; set; }
  [Newtonsoft.Json.JsonProperty("hash")]
  public string Hash { get; set; }
  [Newtonsoft.Json.JsonProperty("dependencies")]
  public List<string> Dependencies { get; set; }

  public BundleDetailsT() {
    this.FileName = null;
    this.Crc = null;
    this.Hash = null;
    this.Dependencies = null;
  }
}


}
