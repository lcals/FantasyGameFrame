// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Fantasy.Config
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Monster : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Monster GetRootAsMonster(ByteBuffer _bb) { return GetRootAsMonster(_bb, new Monster()); }
  public static Monster GetRootAsMonster(ByteBuffer _bb, Monster obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Monster __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Fantasy.Config.Vec3? Pos { get { int o = __p.__offset(4); return o != 0 ? (Fantasy.Config.Vec3?)(new Fantasy.Config.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public short Mana { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)150; } }
  public short Hp { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)100; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public byte Inventory(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int InventoryLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInventoryBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetInventoryBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetInventoryArray() { return __p.__vector_as_array<byte>(14); }
  public Fantasy.Config.Color Color { get { int o = __p.__offset(16); return o != 0 ? (Fantasy.Config.Color)__p.bb.GetSbyte(o + __p.bb_pos) : Fantasy.Config.Color.Blue; } }
  public Fantasy.Config.Weapon? Weapons(int j) { int o = __p.__offset(18); return o != 0 ? (Fantasy.Config.Weapon?)(new Fantasy.Config.Weapon()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int WeaponsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Fantasy.Config.Equipment EquippedType { get { int o = __p.__offset(20); return o != 0 ? (Fantasy.Config.Equipment)__p.bb.Get(o + __p.bb_pos) : Fantasy.Config.Equipment.NONE; } }
  public TTable? Equipped<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(22); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public Fantasy.Config.Weapon EquippedAsWeapon() { return Equipped<Fantasy.Config.Weapon>().Value; }
  public Fantasy.Config.Vec3? Path(int j) { int o = __p.__offset(24); return o != 0 ? (Fantasy.Config.Vec3?)(new Fantasy.Config.Vec3()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int PathLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Fantasy.Config.Item? Path1(int j) { int o = __p.__offset(26); return o != 0 ? (Fantasy.Config.Item?)(new Fantasy.Config.Item()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int Path1Length { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Fantasy.Config.Monster> CreateMonster(FlatBufferBuilder builder,
      Fantasy.Config.Vec3T pos = null,
      short mana = 150,
      short hp = 100,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset inventoryOffset = default(VectorOffset),
      Fantasy.Config.Color color = Fantasy.Config.Color.Blue,
      VectorOffset weaponsOffset = default(VectorOffset),
      Fantasy.Config.Equipment equipped_type = Fantasy.Config.Equipment.NONE,
      int equippedOffset = 0,
      VectorOffset pathOffset = default(VectorOffset),
      VectorOffset path1Offset = default(VectorOffset)) {
    builder.StartTable(12);
    Monster.AddPath1(builder, path1Offset);
    Monster.AddPath(builder, pathOffset);
    Monster.AddEquipped(builder, equippedOffset);
    Monster.AddWeapons(builder, weaponsOffset);
    Monster.AddInventory(builder, inventoryOffset);
    Monster.AddName(builder, nameOffset);
    Monster.AddPos(builder, Fantasy.Config.Vec3.Pack(builder, pos));
    Monster.AddHp(builder, hp);
    Monster.AddMana(builder, mana);
    Monster.AddEquippedType(builder, equipped_type);
    Monster.AddColor(builder, color);
    return Monster.EndMonster(builder);
  }

  public static void StartMonster(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddPos(FlatBufferBuilder builder, Offset<Fantasy.Config.Vec3> posOffset) { builder.AddStruct(0, posOffset.Value, 0); }
  public static void AddMana(FlatBufferBuilder builder, short mana) { builder.AddShort(1, mana, 150); }
  public static void AddHp(FlatBufferBuilder builder, short hp) { builder.AddShort(2, hp, 100); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddInventory(FlatBufferBuilder builder, VectorOffset inventoryOffset) { builder.AddOffset(5, inventoryOffset.Value, 0); }
  public static VectorOffset CreateInventoryVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInventoryVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInventoryVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInventoryVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInventoryVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddColor(FlatBufferBuilder builder, Fantasy.Config.Color color) { builder.AddSbyte(6, (sbyte)color, 2); }
  public static void AddWeapons(FlatBufferBuilder builder, VectorOffset weaponsOffset) { builder.AddOffset(7, weaponsOffset.Value, 0); }
  public static VectorOffset CreateWeaponsVector(FlatBufferBuilder builder, Offset<Fantasy.Config.Weapon>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateWeaponsVectorBlock(FlatBufferBuilder builder, Offset<Fantasy.Config.Weapon>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Fantasy.Config.Weapon>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Fantasy.Config.Weapon>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartWeaponsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEquippedType(FlatBufferBuilder builder, Fantasy.Config.Equipment equippedType) { builder.AddByte(8, (byte)equippedType, 0); }
  public static void AddEquipped(FlatBufferBuilder builder, int equippedOffset) { builder.AddOffset(9, equippedOffset, 0); }
  public static void AddPath(FlatBufferBuilder builder, VectorOffset pathOffset) { builder.AddOffset(10, pathOffset.Value, 0); }
  public static void StartPathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddPath1(FlatBufferBuilder builder, VectorOffset path1Offset) { builder.AddOffset(11, path1Offset.Value, 0); }
  public static VectorOffset CreatePath1Vector(FlatBufferBuilder builder, Offset<Fantasy.Config.Item>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePath1VectorBlock(FlatBufferBuilder builder, Offset<Fantasy.Config.Item>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePath1VectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Fantasy.Config.Item>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePath1VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Fantasy.Config.Item>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPath1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Fantasy.Config.Monster> EndMonster(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Fantasy.Config.Monster>(o);
  }
  public static void FinishMonsterBuffer(FlatBufferBuilder builder, Offset<Fantasy.Config.Monster> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMonsterBuffer(FlatBufferBuilder builder, Offset<Fantasy.Config.Monster> offset) { builder.FinishSizePrefixed(offset.Value); }
  public MonsterT UnPack() {
    var _o = new MonsterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MonsterT _o) {
    _o.Pos = this.Pos.HasValue ? this.Pos.Value.UnPack() : null;
    _o.Mana = this.Mana;
    _o.Hp = this.Hp;
    _o.Name = this.Name;
    _o.Inventory = new List<byte>();
    for (var _j = 0; _j < this.InventoryLength; ++_j) {_o.Inventory.Add(this.Inventory(_j));}
    _o.Color = this.Color;
    _o.Weapons = new List<Fantasy.Config.WeaponT>();
    for (var _j = 0; _j < this.WeaponsLength; ++_j) {_o.Weapons.Add(this.Weapons(_j).HasValue ? this.Weapons(_j).Value.UnPack() : null);}
    _o.Equipped = new Fantasy.Config.EquipmentUnion();
    _o.Equipped.Type = this.EquippedType;
    switch (this.EquippedType) {
      default: break;
      case Fantasy.Config.Equipment.Weapon:
        _o.Equipped.Value = this.Equipped<Fantasy.Config.Weapon>().HasValue ? this.Equipped<Fantasy.Config.Weapon>().Value.UnPack() : null;
        break;
    }
    _o.Path = new List<Fantasy.Config.Vec3T>();
    for (var _j = 0; _j < this.PathLength; ++_j) {_o.Path.Add(this.Path(_j).HasValue ? this.Path(_j).Value.UnPack() : null);}
    _o.Path1 = new List<Fantasy.Config.ItemT>();
    for (var _j = 0; _j < this.Path1Length; ++_j) {_o.Path1.Add(this.Path1(_j).HasValue ? this.Path1(_j).Value.UnPack() : null);}
  }
  public static Offset<Fantasy.Config.Monster> Pack(FlatBufferBuilder builder, MonsterT _o) {
    if (_o == null) return default(Offset<Fantasy.Config.Monster>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _inventory = default(VectorOffset);
    if (_o.Inventory != null) {
      var __inventory = _o.Inventory.ToArray();
      _inventory = CreateInventoryVector(builder, __inventory);
    }
    var _weapons = default(VectorOffset);
    if (_o.Weapons != null) {
      var __weapons = new Offset<Fantasy.Config.Weapon>[_o.Weapons.Count];
      for (var _j = 0; _j < __weapons.Length; ++_j) { __weapons[_j] = Fantasy.Config.Weapon.Pack(builder, _o.Weapons[_j]); }
      _weapons = CreateWeaponsVector(builder, __weapons);
    }
    var _equipped_type = _o.Equipped == null ? Fantasy.Config.Equipment.NONE : _o.Equipped.Type;
    var _equipped = _o.Equipped == null ? 0 : Fantasy.Config.EquipmentUnion.Pack(builder, _o.Equipped);
    var _path = default(VectorOffset);
    if (_o.Path != null) {
      StartPathVector(builder, _o.Path.Count);
      for (var _j = _o.Path.Count - 1; _j >= 0; --_j) { Fantasy.Config.Vec3.Pack(builder, _o.Path[_j]); }
      _path = builder.EndVector();
    }
    var _path1 = default(VectorOffset);
    if (_o.Path1 != null) {
      var __path1 = new Offset<Fantasy.Config.Item>[_o.Path1.Count];
      for (var _j = 0; _j < __path1.Length; ++_j) { __path1[_j] = Fantasy.Config.Item.Pack(builder, _o.Path1[_j]); }
      _path1 = CreatePath1Vector(builder, __path1);
    }
    return CreateMonster(
      builder,
      _o.Pos,
      _o.Mana,
      _o.Hp,
      _name,
      _inventory,
      _o.Color,
      _weapons,
      _equipped_type,
      _equipped,
      _path,
      _path1);
  }
}

public class MonsterT
{
  public Fantasy.Config.Vec3T Pos { get; set; }
  public short Mana { get; set; }
  public short Hp { get; set; }
  public string Name { get; set; }
  public List<byte> Inventory { get; set; }
  public Fantasy.Config.Color Color { get; set; }
  public List<Fantasy.Config.WeaponT> Weapons { get; set; }
  public Fantasy.Config.EquipmentUnion Equipped { get; set; }
  public List<Fantasy.Config.Vec3T> Path { get; set; }
  public List<Fantasy.Config.ItemT> Path1 { get; set; }

  public MonsterT() {
    this.Pos = new Fantasy.Config.Vec3T();
    this.Mana = 150;
    this.Hp = 100;
    this.Name = null;
    this.Inventory = null;
    this.Color = Fantasy.Config.Color.Blue;
    this.Weapons = null;
    this.Equipped = null;
    this.Path = null;
    this.Path1 = null;
  }
  public static MonsterT DeserializeFromBinary(byte[] fbBuffer) {
    return Monster.GetRootAsMonster(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Monster.FinishMonsterBuffer(fbb, Monster.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
