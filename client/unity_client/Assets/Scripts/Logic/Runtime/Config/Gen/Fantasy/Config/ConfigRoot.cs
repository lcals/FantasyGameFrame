// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Fantasy.Config
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// root
public struct ConfigRoot : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ConfigRoot GetRootAsConfigRoot(ByteBuffer _bb) { return GetRootAsConfigRoot(_bb, new ConfigRoot()); }
  public static ConfigRoot GetRootAsConfigRoot(ByteBuffer _bb, ConfigRoot obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConfigRoot __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Fantasy.Config.Item? Item(int j) { int o = __p.__offset(4); return o != 0 ? (Fantasy.Config.Item?)(new Fantasy.Config.Item()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ItemLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Fantasy.Config.Role? Role(int j) { int o = __p.__offset(6); return o != 0 ? (Fantasy.Config.Role?)(new Fantasy.Config.Role()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RoleLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Version { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  ///output time
  public string OutputTime { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOutputTimeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOutputTimeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOutputTimeArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<Fantasy.Config.ConfigRoot> CreateConfigRoot(FlatBufferBuilder builder,
      VectorOffset itemOffset = default(VectorOffset),
      VectorOffset roleOffset = default(VectorOffset),
      int version = 0,
      StringOffset output_timeOffset = default(StringOffset)) {
    builder.StartTable(4);
    ConfigRoot.AddOutputTime(builder, output_timeOffset);
    ConfigRoot.AddVersion(builder, version);
    ConfigRoot.AddRole(builder, roleOffset);
    ConfigRoot.AddItem(builder, itemOffset);
    return ConfigRoot.EndConfigRoot(builder);
  }

  public static void StartConfigRoot(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddItem(FlatBufferBuilder builder, VectorOffset itemOffset) { builder.AddOffset(0, itemOffset.Value, 0); }
  public static VectorOffset CreateItemVector(FlatBufferBuilder builder, Offset<Fantasy.Config.Item>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateItemVectorBlock(FlatBufferBuilder builder, Offset<Fantasy.Config.Item>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Fantasy.Config.Item>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Fantasy.Config.Item>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartItemVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRole(FlatBufferBuilder builder, VectorOffset roleOffset) { builder.AddOffset(1, roleOffset.Value, 0); }
  public static VectorOffset CreateRoleVector(FlatBufferBuilder builder, Offset<Fantasy.Config.Role>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRoleVectorBlock(FlatBufferBuilder builder, Offset<Fantasy.Config.Role>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRoleVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Fantasy.Config.Role>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRoleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Fantasy.Config.Role>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRoleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVersion(FlatBufferBuilder builder, int version) { builder.AddInt(2, version, 0); }
  public static void AddOutputTime(FlatBufferBuilder builder, StringOffset outputTimeOffset) { builder.AddOffset(3, outputTimeOffset.Value, 0); }
  public static Offset<Fantasy.Config.ConfigRoot> EndConfigRoot(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Fantasy.Config.ConfigRoot>(o);
  }
  public static void FinishConfigRootBuffer(FlatBufferBuilder builder, Offset<Fantasy.Config.ConfigRoot> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedConfigRootBuffer(FlatBufferBuilder builder, Offset<Fantasy.Config.ConfigRoot> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ConfigRootT UnPack() {
    var _o = new ConfigRootT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConfigRootT _o) {
    _o.Item = new List<Fantasy.Config.ItemT>();
    for (var _j = 0; _j < this.ItemLength; ++_j) {_o.Item.Add(this.Item(_j).HasValue ? this.Item(_j).Value.UnPack() : null);}
    _o.Role = new List<Fantasy.Config.RoleT>();
    for (var _j = 0; _j < this.RoleLength; ++_j) {_o.Role.Add(this.Role(_j).HasValue ? this.Role(_j).Value.UnPack() : null);}
    _o.Version = this.Version;
    _o.OutputTime = this.OutputTime;
  }
  public static Offset<Fantasy.Config.ConfigRoot> Pack(FlatBufferBuilder builder, ConfigRootT _o) {
    if (_o == null) return default(Offset<Fantasy.Config.ConfigRoot>);
    var _item = default(VectorOffset);
    if (_o.Item != null) {
      var __item = new Offset<Fantasy.Config.Item>[_o.Item.Count];
      for (var _j = 0; _j < __item.Length; ++_j) { __item[_j] = Fantasy.Config.Item.Pack(builder, _o.Item[_j]); }
      _item = CreateItemVector(builder, __item);
    }
    var _role = default(VectorOffset);
    if (_o.Role != null) {
      var __role = new Offset<Fantasy.Config.Role>[_o.Role.Count];
      for (var _j = 0; _j < __role.Length; ++_j) { __role[_j] = Fantasy.Config.Role.Pack(builder, _o.Role[_j]); }
      _role = CreateRoleVector(builder, __role);
    }
    var _output_time = _o.OutputTime == null ? default(StringOffset) : builder.CreateString(_o.OutputTime);
    return CreateConfigRoot(
      builder,
      _item,
      _role,
      _o.Version,
      _output_time);
  }
}

public class ConfigRootT
{
  [Newtonsoft.Json.JsonProperty("item")]
  public List<Fantasy.Config.ItemT> Item { get; set; }
  [Newtonsoft.Json.JsonProperty("role")]
  public List<Fantasy.Config.RoleT> Role { get; set; }
  [Newtonsoft.Json.JsonProperty("version")]
  public int Version { get; set; }
  [Newtonsoft.Json.JsonProperty("output_time")]
  public string OutputTime { get; set; }

  public ConfigRootT() {
    this.Item = null;
    this.Role = null;
    this.Version = 0;
    this.OutputTime = null;
  }

  public static ConfigRootT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigRootT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ConfigRootT DeserializeFromBinary(byte[] fbBuffer) {
    return ConfigRoot.GetRootAsConfigRoot(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ConfigRoot.FinishConfigRootBuffer(fbb, ConfigRoot.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
