// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyGame.Sample
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum Color : sbyte
{
  Red = 0,
  Green = 1,
  Blue = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum Equipment : byte
{
  NONE = 0,
  Weapon = 1,
};

public class EquipmentUnion {
  public Equipment Type { get; set; }
  public object Value { get; set; }

  public EquipmentUnion() {
    this.Type = Equipment.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public MyGame.Sample.WeaponT AsWeapon() { return this.As<MyGame.Sample.WeaponT>(); }
  public static EquipmentUnion FromWeapon(MyGame.Sample.WeaponT _weapon) { return new EquipmentUnion{ Type = Equipment.Weapon, Value = _weapon }; }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, EquipmentUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case Equipment.Weapon: return MyGame.Sample.Weapon.Pack(builder, _o.AsWeapon()).Value;
    }
  }
}

public class EquipmentUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(EquipmentUnion) || objectType == typeof(System.Collections.Generic.List<EquipmentUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<EquipmentUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as EquipmentUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, EquipmentUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<EquipmentUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as EquipmentUnion, serializer);
    }
  }
  public EquipmentUnion ReadJson(Newtonsoft.Json.JsonReader reader, EquipmentUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case Equipment.Weapon: _o.Value = serializer.Deserialize<MyGame.Sample.WeaponT>(reader); break;
    }
    return _o;
  }
}

public struct Vec3 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vec3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<MyGame.Sample.Vec3> CreateVec3(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<MyGame.Sample.Vec3>(builder.Offset);
  }
  public Vec3T UnPack() {
    var _o = new Vec3T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vec3T _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
  }
  public static Offset<MyGame.Sample.Vec3> Pack(FlatBufferBuilder builder, Vec3T _o) {
    if (_o == null) return default(Offset<MyGame.Sample.Vec3>);
    return CreateVec3(
      builder,
      _o.X,
      _o.Y,
      _o.Z);
  }
}

public class Vec3T
{
  [Newtonsoft.Json.JsonProperty("x")]
  public float X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public float Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public float Z { get; set; }

  public Vec3T() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
  }
}

public struct Monster : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Monster GetRootAsMonster(ByteBuffer _bb) { return GetRootAsMonster(_bb, new Monster()); }
  public static Monster GetRootAsMonster(ByteBuffer _bb, Monster obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Monster __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MyGame.Sample.Vec3? Pos { get { int o = __p.__offset(4); return o != 0 ? (MyGame.Sample.Vec3?)(new MyGame.Sample.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public short Mana { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)150; } }
  public short Hp { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)100; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public byte Inventory(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int InventoryLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInventoryBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetInventoryBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetInventoryArray() { return __p.__vector_as_array<byte>(14); }
  public MyGame.Sample.Color Color { get { int o = __p.__offset(16); return o != 0 ? (MyGame.Sample.Color)__p.bb.GetSbyte(o + __p.bb_pos) : MyGame.Sample.Color.Blue; } }
  public MyGame.Sample.Weapon? Weapons(int j) { int o = __p.__offset(18); return o != 0 ? (MyGame.Sample.Weapon?)(new MyGame.Sample.Weapon()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int WeaponsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public MyGame.Sample.Equipment EquippedType { get { int o = __p.__offset(20); return o != 0 ? (MyGame.Sample.Equipment)__p.bb.Get(o + __p.bb_pos) : MyGame.Sample.Equipment.NONE; } }
  public TTable? Equipped<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(22); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public MyGame.Sample.Weapon EquippedAsWeapon() { return Equipped<MyGame.Sample.Weapon>().Value; }
  public MyGame.Sample.Vec3? Path(int j) { int o = __p.__offset(24); return o != 0 ? (MyGame.Sample.Vec3?)(new MyGame.Sample.Vec3()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int PathLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<MyGame.Sample.Monster> CreateMonster(FlatBufferBuilder builder,
      MyGame.Sample.Vec3T pos = null,
      short mana = 150,
      short hp = 100,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset inventoryOffset = default(VectorOffset),
      MyGame.Sample.Color color = MyGame.Sample.Color.Blue,
      VectorOffset weaponsOffset = default(VectorOffset),
      MyGame.Sample.Equipment equipped_type = MyGame.Sample.Equipment.NONE,
      int equippedOffset = 0,
      VectorOffset pathOffset = default(VectorOffset)) {
    builder.StartTable(11);
    Monster.AddPath(builder, pathOffset);
    Monster.AddEquipped(builder, equippedOffset);
    Monster.AddWeapons(builder, weaponsOffset);
    Monster.AddInventory(builder, inventoryOffset);
    Monster.AddName(builder, nameOffset);
    Monster.AddPos(builder, MyGame.Sample.Vec3.Pack(builder, pos));
    Monster.AddHp(builder, hp);
    Monster.AddMana(builder, mana);
    Monster.AddEquippedType(builder, equipped_type);
    Monster.AddColor(builder, color);
    return Monster.EndMonster(builder);
  }

  public static void StartMonster(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddPos(FlatBufferBuilder builder, Offset<MyGame.Sample.Vec3> posOffset) { builder.AddStruct(0, posOffset.Value, 0); }
  public static void AddMana(FlatBufferBuilder builder, short mana) { builder.AddShort(1, mana, 150); }
  public static void AddHp(FlatBufferBuilder builder, short hp) { builder.AddShort(2, hp, 100); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddInventory(FlatBufferBuilder builder, VectorOffset inventoryOffset) { builder.AddOffset(5, inventoryOffset.Value, 0); }
  public static VectorOffset CreateInventoryVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInventoryVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInventoryVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInventoryVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInventoryVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddColor(FlatBufferBuilder builder, MyGame.Sample.Color color) { builder.AddSbyte(6, (sbyte)color, 2); }
  public static void AddWeapons(FlatBufferBuilder builder, VectorOffset weaponsOffset) { builder.AddOffset(7, weaponsOffset.Value, 0); }
  public static VectorOffset CreateWeaponsVector(FlatBufferBuilder builder, Offset<MyGame.Sample.Weapon>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateWeaponsVectorBlock(FlatBufferBuilder builder, Offset<MyGame.Sample.Weapon>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<MyGame.Sample.Weapon>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<MyGame.Sample.Weapon>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartWeaponsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEquippedType(FlatBufferBuilder builder, MyGame.Sample.Equipment equippedType) { builder.AddByte(8, (byte)equippedType, 0); }
  public static void AddEquipped(FlatBufferBuilder builder, int equippedOffset) { builder.AddOffset(9, equippedOffset, 0); }
  public static void AddPath(FlatBufferBuilder builder, VectorOffset pathOffset) { builder.AddOffset(10, pathOffset.Value, 0); }
  public static void StartPathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<MyGame.Sample.Monster> EndMonster(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyGame.Sample.Monster>(o);
  }
  public static void FinishMonsterBuffer(FlatBufferBuilder builder, Offset<MyGame.Sample.Monster> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMonsterBuffer(FlatBufferBuilder builder, Offset<MyGame.Sample.Monster> offset) { builder.FinishSizePrefixed(offset.Value); }
  public MonsterT UnPack() {
    var _o = new MonsterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MonsterT _o) {
    _o.Pos = this.Pos.HasValue ? this.Pos.Value.UnPack() : null;
    _o.Mana = this.Mana;
    _o.Hp = this.Hp;
    _o.Name = this.Name;
    _o.Inventory = new List<byte>();
    for (var _j = 0; _j < this.InventoryLength; ++_j) {_o.Inventory.Add(this.Inventory(_j));}
    _o.Color = this.Color;
    _o.Weapons = new List<MyGame.Sample.WeaponT>();
    for (var _j = 0; _j < this.WeaponsLength; ++_j) {_o.Weapons.Add(this.Weapons(_j).HasValue ? this.Weapons(_j).Value.UnPack() : null);}
    _o.Equipped = new MyGame.Sample.EquipmentUnion();
    _o.Equipped.Type = this.EquippedType;
    switch (this.EquippedType) {
      default: break;
      case MyGame.Sample.Equipment.Weapon:
        _o.Equipped.Value = this.Equipped<MyGame.Sample.Weapon>().HasValue ? this.Equipped<MyGame.Sample.Weapon>().Value.UnPack() : null;
        break;
    }
    _o.Path = new List<MyGame.Sample.Vec3T>();
    for (var _j = 0; _j < this.PathLength; ++_j) {_o.Path.Add(this.Path(_j).HasValue ? this.Path(_j).Value.UnPack() : null);}
  }
  public static Offset<MyGame.Sample.Monster> Pack(FlatBufferBuilder builder, MonsterT _o) {
    if (_o == null) return default(Offset<MyGame.Sample.Monster>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _inventory = default(VectorOffset);
    if (_o.Inventory != null) {
      var __inventory = _o.Inventory.ToArray();
      _inventory = CreateInventoryVector(builder, __inventory);
    }
    var _weapons = default(VectorOffset);
    if (_o.Weapons != null) {
      var __weapons = new Offset<MyGame.Sample.Weapon>[_o.Weapons.Count];
      for (var _j = 0; _j < __weapons.Length; ++_j) { __weapons[_j] = MyGame.Sample.Weapon.Pack(builder, _o.Weapons[_j]); }
      _weapons = CreateWeaponsVector(builder, __weapons);
    }
    var _equipped_type = _o.Equipped == null ? MyGame.Sample.Equipment.NONE : _o.Equipped.Type;
    var _equipped = _o.Equipped == null ? 0 : MyGame.Sample.EquipmentUnion.Pack(builder, _o.Equipped);
    var _path = default(VectorOffset);
    if (_o.Path != null) {
      StartPathVector(builder, _o.Path.Count);
      for (var _j = _o.Path.Count - 1; _j >= 0; --_j) { MyGame.Sample.Vec3.Pack(builder, _o.Path[_j]); }
      _path = builder.EndVector();
    }
    return CreateMonster(
      builder,
      _o.Pos,
      _o.Mana,
      _o.Hp,
      _name,
      _inventory,
      _o.Color,
      _weapons,
      _equipped_type,
      _equipped,
      _path);
  }
}

public class MonsterT
{
  [Newtonsoft.Json.JsonProperty("pos")]
  public MyGame.Sample.Vec3T Pos { get; set; }
  [Newtonsoft.Json.JsonProperty("mana")]
  public short Mana { get; set; }
  [Newtonsoft.Json.JsonProperty("hp")]
  public short Hp { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("inventory")]
  public List<byte> Inventory { get; set; }
  [Newtonsoft.Json.JsonProperty("color")]
  public MyGame.Sample.Color Color { get; set; }
  [Newtonsoft.Json.JsonProperty("weapons")]
  public List<MyGame.Sample.WeaponT> Weapons { get; set; }
  [Newtonsoft.Json.JsonProperty("equipped_type")]
  private MyGame.Sample.Equipment EquippedType {
    get {
      return this.Equipped != null ? this.Equipped.Type : MyGame.Sample.Equipment.NONE;
    }
    set {
      this.Equipped = new MyGame.Sample.EquipmentUnion();
      this.Equipped.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("equipped")]
  [Newtonsoft.Json.JsonConverter(typeof(MyGame.Sample.EquipmentUnion_JsonConverter))]
  public MyGame.Sample.EquipmentUnion Equipped { get; set; }
  [Newtonsoft.Json.JsonProperty("path")]
  public List<MyGame.Sample.Vec3T> Path { get; set; }

  public MonsterT() {
    this.Pos = new MyGame.Sample.Vec3T();
    this.Mana = 150;
    this.Hp = 100;
    this.Name = null;
    this.Inventory = null;
    this.Color = MyGame.Sample.Color.Blue;
    this.Weapons = null;
    this.Equipped = null;
    this.Path = null;
  }

  public static MonsterT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<MonsterT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static MonsterT DeserializeFromBinary(byte[] fbBuffer) {
    return Monster.GetRootAsMonster(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Monster.FinishMonsterBuffer(fbb, Monster.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}

public struct Weapon : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Weapon GetRootAsWeapon(ByteBuffer _bb) { return GetRootAsWeapon(_bb, new Weapon()); }
  public static Weapon GetRootAsWeapon(ByteBuffer _bb, Weapon obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Weapon __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public short Damage { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }

  public static Offset<MyGame.Sample.Weapon> CreateWeapon(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      short damage = 0) {
    builder.StartTable(2);
    Weapon.AddName(builder, nameOffset);
    Weapon.AddDamage(builder, damage);
    return Weapon.EndWeapon(builder);
  }

  public static void StartWeapon(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddDamage(FlatBufferBuilder builder, short damage) { builder.AddShort(1, damage, 0); }
  public static Offset<MyGame.Sample.Weapon> EndWeapon(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyGame.Sample.Weapon>(o);
  }
  public WeaponT UnPack() {
    var _o = new WeaponT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WeaponT _o) {
    _o.Name = this.Name;
    _o.Damage = this.Damage;
  }
  public static Offset<MyGame.Sample.Weapon> Pack(FlatBufferBuilder builder, WeaponT _o) {
    if (_o == null) return default(Offset<MyGame.Sample.Weapon>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateWeapon(
      builder,
      _name,
      _o.Damage);
  }
}

public class WeaponT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("damage")]
  public short Damage { get; set; }

  public WeaponT() {
    this.Name = null;
    this.Damage = 0;
  }
}


}
